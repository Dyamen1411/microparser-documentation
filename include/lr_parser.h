/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lr_parser.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amassias <massias.antoine.pro@gmail.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 01:33:50 by ale-boud          #+#    #+#             */
/*   Updated: 2024/12/03 00:42:38 by amassias         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/**
 * @file lr_parser.h
 * 
 * @brief LR parser definition.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */

#ifndef LR_PARSER_H
# define LR_PARSER_H

// ************************************************************************** //
// *                                                                        * //
// * Includes.                                                              * //
// *                                                                        * //
// ************************************************************************** //

# include <stdlib.h>

# include "lr_token.h"
# include "lr_type.h"
# include "lr_error.h"
# include "lr_stack.h"

// ************************************************************************** //
// *                                                                        * //
// * Structure definition.                                                  * //
// *                                                                        * //
// ************************************************************************** //

/**
 * @brief Actions the parser can do.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef enum e_lr_action_type
{
	/**
	 * @brief Analyzer should shift.
	 */
	ACTION_SHIFT,
	/**
	 * @brief Analyzer should reduce.
	 */
	ACTION_REDUCE,
	/**
	 * @brief Analyzer had an error (should never happen).
	 */
	ACTION_ERROR,
	/**
	 * @brief Congratulations, your expression passes the analyzer !
	 */
	ACTION_ACCEPT,
	/**
	 * @brief The number of available actions.
	 */
	ACTION__COUNT,
}	t_lr_action_type;

/**
 * @brief State in which to go.
 * 
 * @param shift_id The state id in which to go in case of a shift action.
 * @param reduce_id The production id in which to go in case of a reduce action.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef union u_lr_action_data
{
	/**
	 * @brief In case of a shift action, the desired state id.
	 */
	t_lr_state_id	shift_id;
	/**
	 * @brief In case of a reduce action, the desired production id.
	 */
	t_lr_prod_id	reduce_id;
}	t_lr_action_data;

/**
 * @brief Description of an action.
 * 
 * @param type The action type.
 * @param data The state / production in which to go.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_action
{
	/**
	 * @brief The action type.
	 */
	t_lr_action_type	type;
	/**
	 * @brief The state / production in which to go.
	 */
	t_lr_action_data	data;
}	t_lr_action;

/**
 * @brief The callback called when a reduce occurs.
 * 
 * @param cb Callback to be called on reduce. \n 
 * **Parameters** :
 * - `cb` The callback to be called on reduce.
 * - `item` The data that the user can use at this time.
 * - `usrptr` The user context.
 * .
 * **Returns** :
 *  - `void*` The data generated by the user or `NULL`.
 * @param size The number of (non) terminal within the right member of this
 * production.
 * @param free_cb Callback to free the generated user data on cleanup. \n 
 * **Parameters** :
 * - `to_free` User generated data by `cb` (to be freed).
 * - `usrptr` The user context.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_prod_cb
{
	/**
	 * @brief Callback to be called on reduce.
	 * 
	 * @param cb The callback to be called on reduc.
	 * @param item The data relative to this production.
	 * @param usrptr The user context.
	 * 
	 * @return `void*` The data generated by the user or `NULL`.
	 */
	void	*(*cb)(t_lr_stack_item *item, void *usrptr);
	/**
	 * @brief The number of (non) terminal within the right member of this
	 * production.
	 */
	size_t	size;
	/**
	 * @brief Callback to free the generated user data on cleanup.
	 * 
	 * @param to_free User generated data by `cb` (to be freed).
	 * @param usrptr The user context.
	 */
	void	(*free_cb)(void *to_free, void *usrptr);
}	t_lr_prod_cb;

/**
 * @brief The parser context.
 * 
 * @param prod_cb List of callback for each production (user managed).
 * @param token_free_cbs List of callback to free each typen type
 * (user managed).
 * @param action_table A table that describes given a state and a token type
 * which action to take (user managed).
 * @param goto_table A table that describes given a state and a production id
 * which state to go to (user managed).
 * @param state_count The number of state of the LR parsing automata
 * (user managed).
 * @param token_count The number of possible token types (user managed).
 * @param prod_count The number of productions (user managed).
 * @param stack A LR stack.
 * @param usrptr A contex provided by the user (user managed).
 * 
 * @note
 * - Some fields need to be set manually by the user :
 *  - `prod_cb`
 *  - `token_free_cbs`
 *  - `action_table`
 *  - `goto_table`
 *  - `state_count`
 *  - `token_count`
 *  - `prod_count`
 *  - `usrptr`
 * 
 * @warning
 * - Fields that are required to be set by the user (see notes) should be set.
 * \n
 * Otherwise, the program can and will crash !
 * 
 * @todo
 * - Find a way to make the compiler tell the user that the required fields are
 * not set and not let the user compile and find out via a crash.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_parser_ctx
{
	/**
	 * @brief List of callback for each production (user managed).
	 */
	t_lr_prod_cb		*prod_cb;
	/**
	 * @brief List of callback to free each typen type (user managed)
	 */
	t_lr_token_free_cb	*token_free_cbs;
	/**
	 * @brief A table that describes given a state and a token type which
	 * action to take (user managed).
	 */
	t_lr_action			*action_table;
	/**
	 * @brief A table that describes given a state and a production id which
	 * state to go to (user managed).
	 */
	t_lr_state_id		*goto_table;
	/**
	 * @brief The number of state of the LR parsing automata (user managed)
	 */
	size_t				state_count;
	/**
	 * @brief The number of possible token types (user managed).
	 */
	size_t				token_count;
	/**
	 * @brief The number of productions (user managed).
	 */
	size_t				prod_count;
	/**
	 * @brief A LR stack.
	 */
	t_lr_stack			stack;
	/**
	 * @brief A contex provided by the user (user managed).
	 */
	void				*usrptr;
}	t_lr_parser_ctx;

// ************************************************************************** //
// *                                                                        * //
// * Function prototypes.                                                   * //
// *                                                                        * //
// ************************************************************************** //

/**
 * @brief Initializes the parser context.
 * 
 * @param ctx A valid pointer to a parser context.
 * @param usrptr The user pointer passed to all callbacks.
 * 
 * @return t_lr_error
 * - `LR_BAD_ALLOC` if an allocation error occured.
 * - `LR_OK` otherwise.
 * 
 * @note
 * - All the data at pointed by `ctx` will be lost.
 * 
 * @warning
 * - You are required to manually set the required fields ! See the 'see also'
 * section.
 * 
 * @see
 * - t_lr_parser_ctx to see which fields need to be set manually.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_parser_init(
					t_lr_parser_ctx *ctx,
					void *usrptr
					);

/**
 * @brief Tries to parse a token. \n
 * If the token marks the accepted parser state, `*derived* is set to the result
 * of the user callbacks.
 * 
 * @param ctx The parser context.
 * @param token A pointer to the token to be parsed.
 * @param derived A pointer to a void pointer in which to store the result if
 * the parser gets into an accepted state.
 * @return t_lr_error 
 * - `LR_ACCEPT` if the token marks the accepted parser state.
 * - `LR_BAD_ALLOC` if an allocation error occured.
 * - `LR_INTERNAL_ERROR`
 * - `LR_SYNTAX_ERROR` if the token can't be accepted by the grammar.
 * - `LR_OK` otherwise.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_parser_exec(
					t_lr_parser_ctx *ctx,
					const t_lr_token *token,
					void **derived
					);

/**
 * @brief Destroys a LR parser context.
 * 
 * @param ctx A pointer to a valid and initialized context.
 * 
 * @warning
 * - Does not cleanup the user user context (usrptr), this task is left fot the
 * user.
 * 
 * @see
 * - t_lr_parser_ctx
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
void			lr_parser_destroy(
					t_lr_parser_ctx *ctx
					);

// ************************************************************************** //
// *                                                                        * //
// * Private function.                                                      * //
// *                                                                        * //
// ************************************************************************** //

/**
 * @brief Parsing core logic. \n
 * See `lr_parser_exec` for more details.
 * 
 * @param ctx The parser context.
 * @param token The token to be parsed.
 * @return t_lr_error 
 * - `LR_ACCEPT` if the token marks the accepted parser state.
 * - `LR_BAD_ALLOC` if an allocation error occured.
 * - `LR_INTERNAL_ERROR`
 * - `LR_SYNTAX_ERROR` if the token can't be accepted by the grammar.
 * - `LR_OK` otherwise.
 * 
 * @see lr_parser_exec
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		_lr_parser_exec(
					t_lr_parser_ctx *ctx,
					const t_lr_token *token
					);

/**
 * @brief Pushes a new item onto the stack (as per theory).
 * 
 * @param ctx The parser context.
 * @param token The token to be pushed onto the stack.
 * @param state_id The state in which the parser automata should go.
 * @return t_lr_error
 * - `LR_BAD_ALLOC` if a memory allocation failed.
 * - `LR_OK` otherwise.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		_lr_parser_shift(
					t_lr_parser_ctx *ctx,
					t_lr_token token,
					t_lr_state_id state_id
					);

/**
 * @brief Removes all the items needed for a production then calls the associted
 * procution callback.
 * 
 * @param ctx The parser context.
 * @param prod_id The id of the current production.
 * @return t_lr_error
 * - `LR_INTERNAL_ERROR` if the stack is not in a valid state or if the callback
 * had an error.
 * - `LR_BAD_ALLOC` if a memory allocation failed.
 * - `LR_OK` otherwise.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		_lr_parser_reduce(
					t_lr_parser_ctx *ctx,
					t_lr_prod_id prod_id
					);

/**
 * @brief Given the current praser automaton state and a production, returns the
 * state in which to go.
 * 
 * @param ctx The parser context.
 * @param state_id The current state id.
 * @param prod_id The current production id.
 * @return t_lr_state_id The state in which to go.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_state_id	_lr_parser_get_goto(
					t_lr_parser_ctx *ctx,
					t_lr_state_id state_id,
					t_lr_prod_id prod_id
					);

/**
 * @brief The action to take given the `token`.
 * 
 * @param ctx Th parser context.
 * @param token The token to parse.
 * @return t_lr_action The action to take.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_action		_lr_parser_get_action(
					t_lr_parser_ctx *ctx,
					const t_lr_token *token
					);

#endif
