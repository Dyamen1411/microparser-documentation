/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   lr_stack.h                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: amassias <massias.antoine.pro@gmail.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 00:32:25 by ale-boud          #+#    #+#             */
/*   Updated: 2024/11/30 15:16:45 by amassias         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/**
 * @file lr_stack.h
 * 
 * @brief The LR analyzer stack definition.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */

#ifndef LR_STACK_H
# define LR_STACK_H

// ************************************************************************** //
// *                                                                        * //
// * Includes.                                                              * //
// *                                                                        * //
// ************************************************************************** //

# include <stddef.h>

# include "lr_token.h"
# include "lr_error.h"
# include "lr_type.h"

// ************************************************************************** //
// *                                                                        * //
// * Structure definition.                                                  * //
// *                                                                        * //
// ************************************************************************** //

/**
 * @brief Valid types for a LR analyzer stack item.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef enum e_lr_stack_item_type
{
	ITEM_TOKEN,
	ITEM_DERIVED,
	ITEM_AXIOM,
	ITEM__COUNT,
}	t_lr_stack_item_type;

/**
 * @brief Derived LR analyzer stack item.
 * 
 * @param prod_free_cb alias for `t_lr_prod_cb::free_cb`.
 * - `to_free` User generated data by `t_lr_prod_cb::cb` (to be freed).
 * - `usrptr` The user context.
 * @param data user data generated by `t_lr_prod_cb::cb`.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_stack_derived
{
	/**
	 * @brief Callback to free the generated user data.
	 * 
	 * @param to_free User generated data by `t_lr_prod_cb::cb` (to be freed).
	 * @param usrptr The user context.
	 */
	void	(*prod_free_cb)(void *to_free, void *usrptr);
	/**
	 * @brief User generated data by `t_lr_prod_cb::cb`.
	 */
	void	*data;
}	t_lr_stack_derived;

/**
 * @brief LR analyzer stack item data.
 * 
 * @param token TODO: documentation
 * @param derived TODO: documentation
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef union u_lr_stack_item_data
{
	t_lr_token			token; // TODO: token generation data
	t_lr_stack_derived	derived; // TODO: cleanup callback
}	t_lr_stack_item_data;

/**
 * @brief LR analyzer stack item.
 * 
 * @param type The token type.
 * @param data The token data.
 * @param state_id The id of the state from which this stack item comes from.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_stack_item
{
	t_lr_stack_item_type	type;
	t_lr_stack_item_data	data;
	t_lr_state_id			state_id;
}	t_lr_stack_item;

/**
 * @brief LR analyzer Stack.
 * 
 * @param data All the stack items.
 * @param token_free_cbs Callback list to free each type of state.
 * @param allocated The size of the buffer that holds the stack items.
 * @param used The number of items that are in the stack.
 * @param usrptr A pointer to the data provided by the user. \n
 * Also refered as `user context`.
 * 
 * @note
 * - This structure is not meant to be initialized by hand.
 * Use `lr_stack_init`.
 * - This structure is not meant to be cleaned up by hand.
 * Use `lr_stack_destroy`.
 * - This structure is not meant to be modified by hand. Use the `lr_stack_*`
 * functions to do so.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
typedef struct s_lr_stack
{
	t_lr_stack_item		*data;
	t_lr_token_free_cb	*token_free_cbs;
	size_t				alloced;
	size_t				used;
	void				*usrptr;
}	t_lr_stack;

// ************************************************************************** //
// *                                                                        * //
// * Function prototypes.                                                   * //
// *                                                                        * //
// ************************************************************************** //

/**
 * @brief Creates and initializes a LR analyzer stack.
 * 
 * @param stack A valid memory area in which to store the stack 
 * @param token_free_cbs Callback list to free each type of state.
 * @param usrptr A pointer to the data provided by the user. \n
 * Also refered as `user context`.
 * 
 * @return t_lr_error
 * - `LR_BAD_ALLOC` if a memory allocation failed.
 * - `LR_OK` otherwise. 
 * 
 * @note
 * - All the data pointed by `stack` will be erased. \n
 * 
 * @warning
 * - If an error occured, `stack` will contain garbage data.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_stack_init(
					t_lr_stack *stack,
					t_lr_token_free_cb *token_free_cbs,
					void *usrptr
					);

/**
 * @brief Destroys and cleans up a LR analyzer stack.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * 
 * @warning
 * - `stack` will not be freed, only it's contents.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
void			lr_stack_destroy(
					t_lr_stack *stack
					);

/**
 * @brief The number of items in `stack`.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * 
 * @return The number of items in `stack`.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
size_t			lr_stack_used(
					const t_lr_stack *stack
					);

/**
 * @brief Pushes an item on `stack`.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * @param item The item to be pushed onto `stack`.
 * 
 * @return t_lr_error
 * - `LR_BAD_ALLOC` if a memory allocation failed.
 * - `LR_OK` otherwise.
 * 
 * @note
 * - In case of a memory allocation error, `stack` will not be changed.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_stack_push(
					t_lr_stack *stack,
					const t_lr_stack_item *item
					);

/**
 * @brief Removes the top-most item of this stack.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * @param item A pointer to a stack item that will hold the content of
 * the top-most item. Can be `NULL`, see notes.
 * 
 * @return t_lr_error
 * - `LR_INTERNAL_ERROR` if the stack is not in a valid state.
 * - `LR_OK` otherwise.
 * 
 * @note
 * - If `item` is `NULL` then this function will only remove the top-most item
 * of this stack and will not try to store it in `item`.
 * 
 * @warning
 * - If you try to pop an item when `stack` is empty,
 * the program will crash. There is no protection yet.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_stack_pop(
					t_lr_stack *stack,
					t_lr_stack_item *item
					);

/**
 * @brief Pops `count` items off `stack`.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * @param count The number of items to pop off `stack`.
 * 
 * @return t_lr_error
 * - `LR_INTERNAL_ERROR` if the stack is not in a valid state.
 * - `LR_OK` otherwise.
 * 
 * @note
 * - The content of the poped items will be lost.
 * Use `lr_stack_pop` if you want to retrieve their content instead.
 * 
 * @warning
 * - If you try to pop more item than there is in `stack`,
 * the program will crash. There is no protection yet.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_error		lr_stack_popn(
					t_lr_stack *stack,
					size_t count
					);
/**
 * @brief Returns the id of the last state that has been pushed onto `stack`.
 * 
 * @param stack A pointer to a valid and initialized LR analyzer stack.
 * 
 * @return t_lr_state_id The id of the last state that has been pushed
 * onto `stack`.
 * 
 * @warning
 * - If you try to execute this function on an empty stack, the program will
 * crash. There is no protection yet.
 * 
 * @author ale-boud (ale-boud@student.42.fr)
 * @date 2023-11-29
 * @copyright Copyright (c) 2023
 */
t_lr_state_id	lr_stack_cur_state(
					t_lr_stack *stack
					);

#endif
